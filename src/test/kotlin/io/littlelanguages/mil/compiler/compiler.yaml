- scenario:
    name: "Greetings"
    tests:
      - name: "Hello 42"
        input: |
          (println 42)
        output: |
          42
      - name: "Hello #t"
        input: |
          (println #t)
        output: |
          #t
      - name: "Hello ()"
        input: |
          (println ())
        output: |
          ()
      - name: "Hello (pair 1 (pair 2 3)))"
        input: |
          (println (pair 1 (pair 2 3)))
        output: |
          (1 2 . 3)
      - name: "Hello World"
        input: |
          (println "Hello World")
        output: |
          Hello World
- scenario:
    name: "Expressions"
    tests:
      - scenario:
          name: Literal Value
          tests:
            - name: Boolean
              input: |
                (println #t)
                (println #f)
              output: |
                #t
                #f
            - name: Integer
              input: |
                (println 123)
                (println -987)
              output: |
                123
                -987
            - name: String
              input: |
                (println "Hello\nWorld")
                (println "Bye\nbye\nlove")
              output: |
                Hello
                World
                Bye
                bye
                love
            - name: ()
              input: |
                (println ())
              output: |
                ()

      - scenario:
          name: Operators
          tests:
            - name: plus
              input: |
                (println (+))
                (println (+ 1))
                (println (+ 1 2))
                (println (+ 1 2 3 4 5 6))
              output: |
                0
                1
                3
                21
            - name: minus
              input: |
                (println (-))
                (println (- 1))
                (println (- 1 2))
                (println (- 1 2 3 4 5 6))
              output: |
                0
                -1
                -1
                -19
            - name: star
              input: |
                (println (*))
                (println (* 2))
                (println (* 3 4))
                (println (* 1 2 3 4 5 6))
              output: |
                1
                2
                12
                720
            - name: slash
              input: |
                (println (/))
                (println (/ 1))
                (println (/ 4 2))
                (println (/ 500 50 2))
              output: |
                1
                1
                2
                5
            - scenario:
                name: equals
                tests:
                  - name: ()
                    input: |
                      (println (= () ()))
                      (println (= () #t))
                      (println (= () 123))
                      (println (= () "hello"))
                      (println (= () (pair 1 2)))
                    output: |
                      #t
                      #f
                      #f
                      #f
                      #f
                  - name: boolean
                    input: |
                      (println (= #t ()))
                      (println (= #t #t))
                      (println (= #t #f))
                      (println (= #t 123))
                      (println (= #t "hello"))
                      (println (= #t (pair 1 2)))
                    output: |
                      #f
                      #t
                      #f
                      #f
                      #f
                      #f
                  - name: integer
                    input: |
                      (println (= 123 ()))
                      (println (= 123 #t))
                      (println (= 123 123))
                      (println (= 456 123))
                      (println (= 123 "hello"))
                      (println (= 123 (pair 1 2)))
                    output: |
                      #f
                      #f
                      #t
                      #f
                      #f
                      #f
                  - name: string
                    input: |
                      (println (= "hello" ()))
                      (println (= "hello" #t))
                      (println (= "hello" 123))
                      (println (= "hello" "hello"))
                      (println (= "hello" "world"))
                      (println (= "hello" (pair 1 2)))
                    output: |
                      #f
                      #f
                      #f
                      #t
                      #f
                      #f
                  - name: pair
                    input: |
                      (println (= (pair 1 2) ()))
                      (println (= (pair 1 2) #t))
                      (println (= (pair 1 2) 123))
                      (println (= (pair 1 2) "hello"))
                      (println (= (pair 1 2) (pair 1 2)))
                      (println (= (pair 1 3) (pair 1 2)))
                    output: |
                      #f
                      #f
                      #f
                      #f
                      #t
                      #f
            - scenario:
                name: less than
                tests:
                  - name: boolean
                    input: |
                      (println (< #f #f))
                      (println (< #f #t))
                      (println (< #t #f))
                      (println (< #t #t))
                    output: |
                      #f
                      #t
                      #f
                      #f
                  - name: integer
                    input: |
                      (println (< 1 1))
                      (println (< 1 2))
                      (println (< 2 1))
                    output: |
                      #f
                      #t
                      #f
                  - name: string
                    input: |
                      (println (< "a" "a"))
                      (println (< "a" "b"))
                      (println (< "b" "a"))
                    output: |
                      #f
                      #t
                      #f
      - scenario:
          name: Forms
          tests:
            - scenario:
                name: if
                tests:
                  - name: (if)
                    input: |
                      (println (if))
                    output: |
                      ()
                  - name: (if 1)
                    input: |
                      (println (if 1))
                    output: |
                      1
                  - name: (if v1 v2 v2)
                    input: |
                      (println (if (= 1 1) 2 3))
                      (println (if (= 0 1) 2 3))
                      (println (if (= 4 7) 1 (= 3 2) 2 3))
                      (println (if (= 4 7) 1 (= 3 2) 2))
                    output: |
                      2
                      3
                      3
                      ()
      - scenario:
          name: Procedures
          tests:
            - name: pair
              input: |
                (println (pair 1 2))
                (println (pair 1 (pair 2 (pair 3 ()))))
              output: |
                (1 . 2)
                (1 2 3)
            - name: car
              input: |
                (println (car (pair 1 2)))
                (println (car (pair 1 (pair 2 (pair 3 ())))))
              output: |
                1
                1
            - name: cdr
              input: |
                (println (cdr (pair 1 2)))
                (println (cdr (pair 1 (pair 2 ()))))
                (println (cdr (pair 1 (pair 2 (pair 3 ())))))
              output: |
                2
                (2)
                (2 3)
            - name: null?
              input: |
                (println (null? ()))
                (println (null? #t))
                (println (null? 123))
                (println (null? "hello"))
                (println (null? (pair 1 2)))
              output: |
                #t
                #f
                #f
                #f
                #f
            - name: boolean?
              input: |
                (println (boolean? ()))
                (println (boolean? #t))
                (println (boolean? 123))
                (println (boolean? "hello"))
                (println (boolean? (pair 1 2)))
              output: |
                #f
                #t
                #f
                #f
                #f
            - name: integer?
              input: |
                (println (integer? ()))
                (println (integer? #t))
                (println (integer? 123))
                (println (integer? "hello"))
                (println (integer? (pair 1 2)))
              output: |
                #f
                #f
                #t
                #f
                #f
            - name: string?
              input: |
                (println (string? ()))
                (println (string? #t))
                (println (string? 123))
                (println (string? "hello"))
                (println (string? (pair 1 2)))
              output: |
                #f
                #f
                #f
                #t
                #f
            - name: pair?
              input: |
                (println (pair? ()))
                (println (pair? #t))
                (println (pair? 123))
                (println (pair? "hello"))
                (println (pair? (pair 1 2)))
              output: |
                #f
                #f
                #f
                #f
                #t

- scenario:
    name: "Forms"
    tests:
      - scenario:
          name: "do"
          tests:
            - name: if
              input: |
                (if #t
                  (do (println "Hello")
                      (println "World")
                  )
                )
              output: |
                Hello
                World
            - name: declaration
              input: |
                (do (const x 1)
                    (do (const y 2)
                    )
                )

                (println x)
                (println y)
              output: |
                1
                2
- scenario:
    name: "Declarations"
    tests:
      - name: "Toplevel value declaration"
        input: |
          (const v1 1)
          (const v2 #t)
          (const v3 "Hello world")
          (const v4 ())
          (const v5 (pair 1 2))

          (println v1)
          (println v2)
          (println v3)
          (println v4)
          (println v5)
        output: |
          1
          #t
          Hello world
          ()
          (1 . 2)
      - name: "Toplevel procedure declaration"
        input: |
          (const (add a b) (+ a b))
          (const (minus a b) (- a b))

          (println (minus 10 (add 1 2)))
        output: |
          7
      - name: "Const value in procedure declaration"
        input: |
          (const (double-sum a b)
            (const sum (+ a b))

            (+ sum sum)
          )

          (println (double-sum 1 2))
        output: |
          6
      - name: "Nested const forward value declaration"
        input: |
          (const a 9)

          (const (f)
              (const v1 a)
              (const a 10)
              (const v2 a)
              (pair v1 v2)
          )

          (println (f))
        output: |
          (9 . 10)
      - name: "Nested procedures with free variables"
        input: |
          (const (f a b)
            (const sum (+ a b))

            (const (g x)
                (const sum2 (+ a b sum))

                (+ sum2 x)
            )

            (g sum)
          )

          (const (nested a)
            (const a' (+ a 1))

            (const (nested-nested b)
              (const b' (+ b 1))

              (const (nested-nested-nested c)
                (const c' (+ c 1))

                (+ a b c a' b' c')
              )

              (nested-nested-nested b')
            )

            (nested-nested a')
          )

          (const (range min max)
            (if (< min max) (pair min (range (+ min 1) max))
                ()
            )
          )

          (const (max a b)
              (if (< a b) b a)
          )

          (const (maxs items)
              (const (max-helper largest rest)
                  (if (null? rest)
                          largest
                      (max-helper (max largest (car rest)) (cdr rest))
                  )
              )

              (if (null? items)
                      ()
                  (max-helper (car items) (cdr items))
              )
          )

          (const (count items)
            (if (null? items) 0
                (+ 1 (count (cdr items)))
            )
          )

          (const (sum items)
            (if (null? items) 0
                (+ (car items) (sum (cdr items)))
            )
          )

          (println (f 1 2))
          (println (nested 1))

          (const lots (range 0 100000))

          (println "count: " (count lots))
          (println "sum: " (sum lots))
          (println "max: " (maxs lots))
        output: |
          9
          15
          count: 100000
          sum: 704982704
          max: 99999
      - name: "Nested if declarations"
        input: |
          (const a 1)
          (const b (if (= a 1) 2 3))
          (const c
            (do (const z 4)
                (- z 1)
            )
          )

          (const d
            (do (println c)
                (const c (+ a b 1))
                (println c)
                c
            )
          )

          (println a)
          (println b)
          (println c)
          (println d)
        output: |
          3
          4
          1
          2
          3
          4

- scenario:
    name: "Higher-order procedures"
    tests:
      - name: "Declared without frame"
        input: |
          (const (plus a b)
              (+ a b)
          )

          (const plusp plus)

          (const (inc a) (plus 1 a))
          (const (incp a) (plusp 1 a))

          (println (plus 1 2))
          (println (plusp 1 2))
          (println (inc 1))
          (println (incp 1))
        output: |
          3
          3
          2
          2
      - name: "Up to 10 arguments without frame"
        input: |
          (const (f0)
            (println "f0")
          )

          (const (f1 a1)
            (println "f1: " a1)
          )

          (const (f2 a1 a2)
            (println "f2: " a1 ", " a2)
          )

          (const (f3 a1 a2 a3)
            (println "f3: " a1 ", " a2 ", " a3)
          )

          (const (f4 a1 a2 a3 a4)
            (println "f4: " a1 ", " a2 ", " a3 ", " a4)
          )

          (const (f5 a1 a2 a3 a4 a5)
            (println "f5: " a1 ", " a2 ", " a3 ", " a4 ", " a5)
          )

          (const (f6 a1 a2 a3 a4 a5 a6)
            (println "f6: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6)
          )

          (const (f7 a1 a2 a3 a4 a5 a6 a7)
            (println "f7: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7)
          )

          (const (f8 a1 a2 a3 a4 a5 a6 a7 a8)
            (println "f8: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8)
          )

          (const (f9 a1 a2 a3 a4 a5 a6 a7 a8 a9)
            (println "f9: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8 ", " a9)
          )

          (const (f10 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10)
            (println "f10: " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " a8 ", " a9 ", " a10)
          )

          (const v0 f0)
          (v0)

          (const v1 f1)
          (v1 1)

          (const v2 f2)
          (v2 1 2)

          (const v3 f3)
          (v3 1 2 3)

          (const v4 f4)
          (v4 1 2 3 4)

          (const v5 f5)
          (v5 1 2 3 4 5)

          (const v6 f6)
          (v6 1 2 3 4 5 6)

          (const v7 f7)
          (v7 1 2 3 4 5 6 7)

          (const v8 f8)
          (v8 1 2 3 4 5 6 7 8)

          (const v9 f9)
          (v9 1 2 3 4 5 6 7 8 9)

          (const v10 f10)
          (v10 1 2 3 4 5 6 7 8 9 10)
        output: |
          f0
          f1: 1
          f2: 1, 2
          f3: 1, 2, 3
          f4: 1, 2, 3, 4
          f5: 1, 2, 3, 4, 5
          f6: 1, 2, 3, 4, 5, 6
          f7: 1, 2, 3, 4, 5, 6, 7
          f8: 1, 2, 3, 4, 5, 6, 7, 8
          f9: 1, 2, 3, 4, 5, 6, 7, 8, 9
          f10: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
      - name: builtin procedure of fixed arity
        input: |
          (const apair pair)
          (const result (apair 1 (apair 2 (apair 3 ()))))

          (const apair? pair?)

          (println result)
          (println (apair? result))
        output: |
          (1 2 3)
          #t
