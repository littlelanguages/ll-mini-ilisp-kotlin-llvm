- scenario:
    name: Expressions
    tests:
      - scenario:
          name: Literal Boolean
          tests:
            - name: "true"
              input: |
                const x = true;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralBool: 'True'
                  s:
                    EmptyStatement: {}
            - name: "false"
              input: |
                const x = false;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralBool: 'False'
                  s:
                    EmptyStatement: {}
      - scenario:
          name: Literal Int
          tests:
            - name: "positive int in range: 123"
              input: |
                const x = 123;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralInt: '123'
                  s:
                    EmptyStatement: {}
            - name: "positive maximum int in range: 2147483647"
              input: |
                const x = 2147483647;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralInt: '2147483647'
                  s:
                    EmptyStatement: {}
            - name: "positive maximum int just outside range: 2147483648"
              input: |
                const x = 2147483648;
              output:
                - LiteralIntOverflow:
                    text: '2147483648'
                    position: 10:1:11-19:1:20
            - name: "negative int in range: -123"
              input: |
                const x = -123;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralInt: '-123'
                  s:
                    EmptyStatement: {}
            - name: "negative maximum int just inside range: -2147483648"
              input: |
                const x = -2147483648;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralInt: '-2147483648'
                  s:
                    EmptyStatement: {}
            - name: "negative maximum int just outside range: -2147483649"
              input: |
                const x = -2147483649;
              output:
                - LiteralIntOverflow:
                    text: '-2147483649'
                    position: 10:1:11-20:1:21
      - scenario:
          name: Literal Float
          tests:
            - name: "positive float in range: 1.2"
              input: |
                const x = 1.2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '1.2'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with positive E: 1.2E2"
              input: |
                const x = 1.2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '120.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with positive E: 1.2E+2"
              input: |
                const x = 1.2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '120.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with positive e: 1.2e2"
              input: |
                const x = 1.2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '120.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with positive e: 1.2e+2"
              input: |
                const x = 1.2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '120.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and positive E: .2E2"
              input: |
                const x = .2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '20.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and positive E: .2E+2"
              input: |
                const x = .2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '20.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and positive e: .2e2"
              input: |
                const x = .2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '20.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and positive e: .2e+2"
              input: |
                const x = .2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '20.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and positive E: 2E2"
              input: |
                const x = 2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '200.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and positive E: 2E+2"
              input: |
                const x = 2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '200.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and positive e: 2e2"
              input: |
                const x = 2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '200.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and positive e: 2e+2"
              input: |
                const x = 2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '200.0'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with negative E: 1.2E-2"
              input: |
                const x = 1.2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '1.2e-2'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range with negative E: 1.2e-2"
              input: |
                const x = 1.2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '1.2e-2'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and negative E: .2E-2"
              input: |
                const x = .2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '2.0e-3'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range starting with . and negative E: .2e-2"
              input: |
                const x = .2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '2.0e-3'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and negative E: 2E-2"
              input: |
                const x = 2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '2.0e-2'
                  s:
                    EmptyStatement: {}
            - name: "positive float in range without . and negative e: 2e-2"
              input: |
                const x = 2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '2.0e-2'
                  s:
                    EmptyStatement: {}
            - name: "positive float outside range: 1.0e100"
              input: |
                const x = 1.0e100;
              output:
                - LiteralFloatOverflow:
                    text: '1.0e100'
                    position: 10:1:11-16:1:17
            - name: "negative float in range: -1.2"
              input: |
                const x = -1.2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-1.2'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with positive E: -1.2E2"
              input: |
                const x = -1.2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-120.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with positive E: -1.2E+2"
              input: |
                const x = -1.2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-120.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with positive e: -1.2e2"
              input: |
                const x = -1.2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-120.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with positive e: -1.2e+2"
              input: |
                const x = -1.2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-120.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and positive E: -.2E2"
              input: |
                const x = -.2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-20.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and positive E: -.2E+2"
              input: |
                const x = -.2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-20.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and positive e: -.2e2"
              input: |
                const x = -.2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-20.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and positive e: -.2e+2"
              input: |
                const x = -.2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-20.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and positive E: -2E2"
              input: |
                const x = -2E2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-200.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and positive E: -2E+2"
              input: |
                const x = -2E+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-200.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and positive e: -2e2"
              input: |
                const x = -2e2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-200.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and positive e: -2e+2"
              input: |
                const x = -2e+2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-200.0'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with negative E: -1.2E-2"
              input: |
                const x = -1.2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-1.2e-2'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range with negative E: -1.2e-2"
              input: |
                const x = -1.2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-1.2e-2'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and negative E: -.2E-2"
              input: |
                const x = -.2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-2.0e-3'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range starting with . and negative E: -.2e-2"
              input: |
                const x = -.2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-2.0e-3'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and negative E: -2E-2"
              input: |
                const x = -2E-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat: '-2.0e-2'
                  s:
                    EmptyStatement: {}
            - name: "negative float in range without . and negative e: -2e-2"
              input: |
                const x = -2e-2;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralFloat:  '-2.0e-2'
                  s:
                    EmptyStatement: {}
            - name: "negative float outside range: -1.0e100"
              input: |
                const x = -1.0e100;
              output:
                - LiteralFloatOverflow:
                    text: '-1.0e100'
                    position: 10:1:11-17:1:18
      - scenario:
          name: Ternary
          tests:
            - name: "true ? 1 : 2"
              input: |
                fun main() {
                  const x = true ? 1 : 2;
                }
              output:
                Program:
                  d: []
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        TernaryExpression:
                          type: Int
                          e1:
                            LiteralValue:
                              LiteralBool: 'True'
                          e2:
                            LiteralValue:
                              LiteralInt: '1'
                          e3:
                            LiteralValue:
                              LiteralInt: '2'
            - name: "Ternary Expression Not Boolean: 1.0 ? 1 : 2"
              input: |
                fun main() {
                  const x = 1.0 ? 1 : 2;
                }
              output:
                - TernaryExpressionNotBoolean:
                    boolPosition: 25:2:13-27:2:15
                    position: 25:2:13-35:2:23
            - name: "Ternary Expression Results Incompatible: true ? 1 : 2.0"
              input: |
                fun main() {
                  const x = true ? 1 : 2.0;
                }
              output:
                - TernaryExpressionResultIncompatible:
                    thenPosition: "32:2:20"
                    elsePosition: 36:2:24-38:2:26
      - scenario:
          name: Binary
          tests:
            - scenario:
                name: Boolean operators
                tests:
                  - scenario:
                      name: "&&"
                      tests:
                        - name: "true && true"
                          input: |
                            fun main() {
                              const x = true && true;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: And
                                      e1:
                                        LiteralValue:
                                          LiteralBool: 'True'
                                      e2:
                                        LiteralValue:
                                          LiteralBool: 'True'
                        - name: "1 && true"
                          input: |
                            fun main() {
                              const x = 1 && true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: And
                                type: Int
                                position: "25:2:13"
                        - name: "true && 1"
                          input: |
                            fun main() {
                              const x = true && 1;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: And
                                type: Int
                                position: "33:2:21"
                        - name: "1.0 && 1"
                          input: |
                            fun main() {
                              const x = 1.0 && 1;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: And
                                type: Float
                                position: 25:2:13-27:2:15
                            - BinaryExpressionRequiresOperandType:
                                op: And
                                type: Int
                                position: "32:2:20"
                  - scenario:
                      name: "||"
                      tests:
                        - name: "true || true"
                          input: |
                            fun main() {
                              const x = true || true;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: Or
                                      e1:
                                        LiteralValue:
                                          LiteralBool: 'True'
                                      e2:
                                        LiteralValue:
                                          LiteralBool: 'True'
                        - name: "1 || true"
                          input: |
                            fun main() {
                              const x = 1 || true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Or
                                type: Int
                                position: "25:2:13"
                        - name: "true || 1"
                          input: |
                            fun main() {
                              const x = true || 1;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Or
                                type: Int
                                position: "33:2:21"
                        - name: "1.0 || 1"
                          input: |
                            fun main() {
                              const x = 1.0 || 1;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Or
                                type: Float
                                position: 25:2:13-27:2:15
                            - BinaryExpressionRequiresOperandType:
                                op: Or
                                type: Int
                                position: "32:2:20"
            - scenario:
                name: Equality operators
                tests:
                  - scenario:
                      name: "=="
                      tests:
                        - name: "true == true"
                          input: |
                            fun main() {
                              const x = true == true;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: Equal
                                      e1:
                                        LiteralValue:
                                          LiteralBool: 'True'
                                      e2:
                                        LiteralValue:
                                          LiteralBool: 'True'
                        - name: "3 == 1"
                          input: |
                            fun main() {
                              const x = 3 == 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: Equal
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 == 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 == 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: Equal
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 == true"
                          input: |
                            fun main() {
                              const x = 1 == true;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Equal
                                position1: "25:2:13"
                                type1: Int
                                position2: 30:2:18-33:2:21
                                type2: Bool
                        - name: "true == 1"
                          input: |
                            fun main() {
                              const x = true == 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Equal
                                position1: 25:2:13-28:2:16
                                type1: Bool
                                position2: "33:2:21"
                                type2: Int
                  - scenario:
                      name: "!="
                      tests:
                        - name: "true != true"
                          input: |
                            fun main() {
                              const x = true != true;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: NotEqual
                                      e1:
                                        LiteralValue:
                                          LiteralBool: 'True'
                                      e2:
                                        LiteralValue:
                                          LiteralBool: 'True'
                        - name: "3 != 1"
                          input: |
                            fun main() {
                              const x = 3 != 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: NotEqual
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 != 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 != 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: NotEqual
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 != true"
                          input: |
                            fun main() {
                              const x = 1 != true;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: NotEqual
                                position1: "25:2:13"
                                type1: Int
                                position2: 30:2:18-33:2:21
                                type2: Bool
                        - name: "true != 1"
                          input: |
                            fun main() {
                              const x = true != 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: NotEqual
                                position1: 25:2:13-28:2:16
                                type1: Bool
                                position2: "33:2:21"
                                type2: Int
            - scenario:
                name: Relational operators
                tests:
                  - scenario:
                      name: "<"
                      tests:
                        - name: "true < true"
                          input: |
                            fun main() {
                              const x = true < true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: LessThan
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: LessThan
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 < 1"
                          input: |
                            fun main() {
                              const x = 3 < 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: LessThan
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 < 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 < 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: LessThan
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 < true"
                          input: |
                            fun main() {
                              const x = 1 < true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: LessThan
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: LessThan
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "true < 1"
                          input: |
                            fun main() {
                              const x = 1.0 < 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: LessThan
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
                  - scenario:
                      name: "<="
                      tests:
                        - name: "true <= true"
                          input: |
                            fun main() {
                              const x = true <= true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: LessEqual
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: LessEqual
                                type: Bool
                                position: 33:2:21-36:2:24
                        - name: "3 <= 1"
                          input: |
                            fun main() {
                              const x = 3 <= 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: LessEqual
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 <= 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 <= 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: LessEqual
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 <= true"
                          input: |
                            fun main() {
                              const x = 1 <= true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: LessEqual
                                type: Bool
                                position: 30:2:18-33:2:21
                            - BinaryExpressionOperandsIncompatible:
                                op: LessEqual
                                position1: "25:2:13"
                                type1: Int
                                position2: 30:2:18-33:2:21
                                type2: Bool
                        - name: "true <= 1"
                          input: |
                            fun main() {
                              const x = 1.0 <= 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: LessEqual
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "32:2:20"
                                type2: Int
                  - scenario:
                      name: ">"
                      tests:
                        - name: "true > true"
                          input: |
                            fun main() {
                              const x = true > true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterThan
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterThan
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 > 1"
                          input: |
                            fun main() {
                              const x = 3 > 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: GreaterThan
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 > 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 > 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: GreaterThan
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 > true"
                          input: |
                            fun main() {
                              const x = 1 > true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterThan
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: GreaterThan
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "1.0 > 1"
                          input: |
                            fun main() {
                              const x = 1.0 > 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: GreaterThan
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
                  - scenario:
                      name: ">="
                      tests:
                        - name: "true >= true"
                          input: |
                            fun main() {
                              const x = true >= true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterEqual
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterEqual
                                type: Bool
                                position: 33:2:21-36:2:24
                        - name: "3 >= 1"
                          input: |
                            fun main() {
                              const x = 3 >= 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: GreaterEqual
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 >= 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 >= 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Bool
                                      op: GreaterEqual
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 >= true"
                          input: |
                            fun main() {
                              const x = 1 >= true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: GreaterEqual
                                type: Bool
                                position: 30:2:18-33:2:21
                            - BinaryExpressionOperandsIncompatible:
                                op: GreaterEqual
                                position1: "25:2:13"
                                type1: Int
                                position2: 30:2:18-33:2:21
                                type2: Bool
                        - name: "1.0 >= 1"
                          input: |
                            fun main() {
                              const x = 1.0 >= 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: GreaterEqual
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "32:2:20"
                                type2: Int
            - scenario:
                name: Arithmatic operators
                tests:
                  - scenario:
                      name: "+"
                      tests:
                        - name: "true + true"
                          input: |
                            fun main() {
                              const x = true + true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Plus
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: Plus
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 + 1"
                          input: |
                            fun main() {
                              const x = 3 + 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Int
                                      op: Plus
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 + 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 + 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Float
                                      op: Plus
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 + true"
                          input: |
                            fun main() {
                              const x = 1 + true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Plus
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: Plus
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "1.0 + 1"
                          input: |
                            fun main() {
                              const x = 1.0 + 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Plus
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
                  - scenario:
                      name: "-"
                      tests:
                        - name: "true - true"
                          input: |
                            fun main() {
                              const x = true - true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Minus
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: Minus
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 - 1"
                          input: |
                            fun main() {
                              const x = 3 - 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Int
                                      op: Minus
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 - 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 - 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Float
                                      op: Minus
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 - true"
                          input: |
                            fun main() {
                              const x = 1 - true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Minus
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: Minus
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "1.0 - 1"
                          input: |
                            fun main() {
                              const x = 1.0 - 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Minus
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
                  - scenario:
                      name: "*"
                      tests:
                        - name: "true * true"
                          input: |
                            fun main() {
                              const x = true * true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Times
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: Times
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 * 1"
                          input: |
                            fun main() {
                              const x = 3 * 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Int
                                      op: Times
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 * 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 * 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Float
                                      op: Times
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 * true"
                          input: |
                            fun main() {
                              const x = 1 * true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Times
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: Times
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "1.0 * 1"
                          input: |
                            fun main() {
                              const x = 1.0 * 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Times
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
                  - scenario:
                      name: "/"
                      tests:
                        - name: "true / true"
                          input: |
                            fun main() {
                              const x = true / true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Divide
                                type: Bool
                                position: 25:2:13-28:2:16
                            - BinaryExpressionRequiresOperandType:
                                op: Divide
                                type: Bool
                                position: 32:2:20-35:2:23
                        - name: "3 / 1"
                          input: |
                            fun main() {
                              const x = 3 / 1;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Int
                                      op: Divide
                                      e1:
                                        LiteralValue:
                                          LiteralInt: '3'
                                      e2:
                                        LiteralValue:
                                          LiteralInt: '1'
                        - name: "1.234 / 43.2"
                          input: |
                            fun main() {
                              const x = 1.234 / 43.2;
                            }
                          output:
                            Program:
                              d: []
                              s:
                                ConstantDeclarationStatement:
                                  identifier: x
                                  e:
                                    BinaryExpression:
                                      type: Float
                                      op: Divide
                                      e1:
                                        LiteralValue:
                                          LiteralFloat: '1.234'
                                      e2:
                                        LiteralValue:
                                          LiteralFloat: '43.2'
                        - name: "1 / true"
                          input: |
                            fun main() {
                              const x = 1 / true;
                            }
                          output:
                            - BinaryExpressionRequiresOperandType:
                                op: Divide
                                type: Bool
                                position: 29:2:17-32:2:20
                            - BinaryExpressionOperandsIncompatible:
                                op: Divide
                                position1: "25:2:13"
                                type1: Int
                                position2: 29:2:17-32:2:20
                                type2: Bool
                        - name: "1.0 / 1"
                          input: |
                            fun main() {
                              const x = 1.0 / 1;
                            }
                          output:
                            - BinaryExpressionOperandsIncompatible:
                                op: Divide
                                position1: 25:2:13-27:2:15
                                type1: Float
                                position2: "31:2:19"
                                type2: Int
      - scenario:
          name: Unary
          tests:
            - scenario:
                name: "-"
                tests:
                  - name: "-(1+1)"
                    input: |
                      fun main() {
                        const x = -(1+1);
                      }
                    output:
                      Program:
                        d: []
                        s:
                          ConstantDeclarationStatement:
                            identifier: x
                            e:
                              UnaryExpression:
                                type: Int
                                op: UnaryMinus
                                e:
                                  BinaryExpression:
                                    type: Int
                                    op: Plus
                                    e1:
                                      LiteralValue:
                                        LiteralInt: '1'
                                    e2:
                                      LiteralValue:
                                        LiteralInt: '1'
                  - name: "-(1.0+1.0)"
                    input: |
                      fun main() {
                        const x = -(1.0+1.0);
                      }
                    output:
                      Program:
                        d: []
                        s:
                          ConstantDeclarationStatement:
                            identifier: x
                            e:
                              UnaryExpression:
                                type: Float
                                op: UnaryMinus
                                e:
                                  BinaryExpression:
                                    type: Float
                                    op: Plus
                                    e1:
                                      LiteralValue:
                                        LiteralFloat: '1.0'
                                    e2:
                                      LiteralValue:
                                        LiteralFloat: '1.0'
                  - name: "not true"
                    input: |
                      fun main() {
                        const x = -true;
                      }
                    output:
                      - UnaryExpressionRequiresOperandType:
                          op: UnaryMinus
                          type: Bool
                          position: 26:2:14-29:2:17
            - scenario:
                name: "+"
                tests:
                  - name: "+(1+1)"
                    input: |
                      fun main() {
                        const x = +(1+1);
                      }
                    output:
                      Program:
                        d: []
                        s:
                          ConstantDeclarationStatement:
                            identifier: x
                            e:
                              UnaryExpression:
                                type: Int
                                op: UnaryPlus
                                e:
                                  BinaryExpression:
                                    type: Int
                                    op: Plus
                                    e1:
                                      LiteralValue:
                                        LiteralInt: '1'
                                    e2:
                                      LiteralValue:
                                        LiteralInt: '1'
                  - name: "+(1.0+1.0)"
                    input: |
                      fun main() {
                        const x = +(1.0+1.0);
                      }
                    output:
                      Program:
                        d: []
                        s:
                          ConstantDeclarationStatement:
                            identifier: x
                            e:
                              UnaryExpression:
                                type: Float
                                op: UnaryPlus
                                e:
                                  BinaryExpression:
                                    type: Float
                                    op: Plus
                                    e1:
                                      LiteralValue:
                                        LiteralFloat: '1.0'
                                    e2:
                                      LiteralValue:
                                        LiteralFloat: '1.0'
                  - name: "+true"
                    input: |
                      fun main() {
                        const x = +true;
                      }
                    output:
                      - UnaryExpressionRequiresOperandType:
                          op: UnaryPlus
                          type: Bool
                          position: 26:2:14-29:2:17
            - scenario:
                name: "not"
                tests:
                  - name: "not 1"
                    input: |
                      fun main() {
                        const x = !1;
                      }
                    output:
                      - UnaryExpressionRequiresOperandType:
                          op: UnaryNot
                          type: Int
                          position: "26:2:14"
                  - name: "not 1.0"
                    input: |
                      fun main() {
                        const x = !1.0;
                      }
                    output:
                      - UnaryExpressionRequiresOperandType:
                          op: UnaryNot
                          type: Float
                          position: 26:2:14-28:2:16
                  - name: "not true"
                    input: |
                      fun main() {
                        const x = !true;
                      }
                    output:
                      Program:
                        d: []
                        s:
                          ConstantDeclarationStatement:
                            identifier: x
                            e:
                              UnaryExpression:
                                type: Bool
                                op: UnaryNot
                                e:
                                  LiteralValue:
                                    LiteralBool: 'True'
      - scenario:
          name: Identifier Reference
          tests:
            - name: Reference global Int constant as Int
              input: |
                const value = 1;

                fun main() {
                  const x = value + 2;
                }
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: value
                        e:
                          LiteralInt: '1'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Int
                          op: Plus
                          e1:
                            IdentifierReference:
                              name: value
                              type: Int
                          e2:
                            LiteralValue:
                              LiteralInt: '2'
            - name: Reference global Float constant as Float
              input: |
                const value = 1.0;

                fun main() {
                  const x = value + 2.1;
                }
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: value
                        e:
                          LiteralFloat: '1.0'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Float
                          op: Plus
                          e1:
                            IdentifierReference:
                              name: value
                              type: Float
                          e2:
                            LiteralValue:
                              LiteralFloat: '2.1'
            - name: Reference global Bool constant as Bool
              input: |
                const value = false;

                fun main() {
                  const x = value && true;
                }
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: value
                        e:
                          LiteralBool: 'False'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Bool
                          op: And
                          e1:
                            IdentifierReference:
                              name: value
                              type: Bool
                          e2:
                            LiteralValue:
                              LiteralBool: 'True'
            - name: Reference global Int variable as Int
              input: |
                let value = 1;

                fun main() {
                  const x = value + 2;
                }
              output:
                Program:
                  d:
                    - VariableDeclaration:
                        identifier: value
                        e:
                          LiteralInt: '1'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Int
                          op: Plus
                          e1:
                            IdentifierReference:
                              name: value
                              type: Int
                          e2:
                            LiteralValue:
                              LiteralInt: '2'
            - name: Reference global Float variable as Float
              input: |
                let value = 1.0;

                fun main() {
                  const x = value + 2.1;
                }
              output:
                Program:
                  d:
                    - VariableDeclaration:
                        identifier: value
                        e:
                          LiteralFloat: '1.0'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Float
                          op: Plus
                          e1:
                            IdentifierReference:
                              name: value
                              type: Float
                          e2:
                            LiteralValue:
                              LiteralFloat: '2.1'
            - name: Reference global Bool variable as Bool
              input: |
                let value = false;

                fun main() {
                  const x = value && true;
                }
              output:
                Program:
                  d:
                    - VariableDeclaration:
                        identifier: value
                        e:
                          LiteralBool: 'False'
                  s:
                    ConstantDeclarationStatement:
                      identifier: x
                      e:
                        BinaryExpression:
                          type: Bool
                          op: And
                          e1:
                            IdentifierReference:
                              name: value
                              type: Bool
                          e2:
                            LiteralValue:
                              LiteralBool: 'True'
            - name: Reference function as value
              input: |
                fun it() { }

                fun add() {
                  const x = it;
                }
              output:
                - UnableToReferenceFunction:
                    name: it
                    position: 38:4:13-39:4:14
            - name: Reference Int argument
              input: |
                fun add(a: Int) {
                  const x = a;
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: add
                        arguments:
                          - name: a
                            type: Int
                        s:
                          - ConstantDeclarationStatement:
                              identifier: x
                              e:
                                IdentifierReference:
                                  name: a
                                  type: Int
                  s:
                    EmptyStatement: {}
            - name: Reference Float argument
              input: |
                fun add(a: Float) {
                  const x = a;
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: add
                        arguments:
                          - name: a
                            type: Float
                        s:
                          - ConstantDeclarationStatement:
                              identifier: x
                              e:
                                IdentifierReference:
                                  name: a
                                  type: Float
                  s:
                    EmptyStatement: {}
            - name: Reference Bool argument
              input: |
                fun add(a: Bool) {
                  const x = a;
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: add
                        arguments:
                          - name: a
                            type: Bool
                        s:
                          - ConstantDeclarationStatement:
                              identifier: x
                              e:
                                IdentifierReference:
                                  name: a
                                  type: Bool
                  s:
                    EmptyStatement: {}
            - name: Reference Int constant in same lexical scope
              input: |
                fun main() {
                  const x = 1;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '1'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Int
            - name: Reference Float constant in same lexical scope
              input: |
                fun main() {
                  const x = 1.2;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '1.2'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Float
            - name: Reference Bool constant in same lexical scope
              input: |
                fun main() {
                  const x = true;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Bool
            - name: Reference Int variable in same lexical scope
              input: |
                fun main() {
                  let x = 1;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '1'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Int
            - name: Reference Float variable in same lexical scope
              input: |
                fun main() {
                  let x = 1.2;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '1.2'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Float
            - name: Reference Bool variable in same lexical scope
              input: |
                fun main() {
                  let x = true;
                  const y = x;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                      - ConstantDeclarationStatement:
                          identifier: 'y'
                          e:
                            IdentifierReference:
                              name: x
                              type: Bool
            - name: Reference Int constant in outer lexical scope
              input: |
                fun main() {
                  const x = 1;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '1'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Int
            - name: Reference Float constant in outer lexical scope
              input: |
                fun main() {
                  const x = 1.2;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '1.2'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Float
            - name: Reference Bool constant in outer lexical scope
              input: |
                fun main() {
                  const x = true;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - ConstantDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Bool
            - name: Reference Int variable in outer lexical scope
              input: |
                fun main() {
                  let x = 1;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '1'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Int
            - name: Reference Float variable in outer lexical scope
              input: |
                fun main() {
                  let x = 1.2;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '1.2'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Float
            - name: Reference Bool variable in outer lexical scope
              input: |
                fun main() {
                  let x = true;

                  {
                    const y = x;
                  }
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                      - BlockStatement:
                          - ConstantDeclarationStatement:
                              identifier: 'y'
                              e:
                                IdentifierReference:
                                  name: x
                                  type: Bool
            - name: Reference unknown identifier
              input: |
                fun add(a: Int, b: Int) {
                  const x = y;
                }
              output:
                - UnknownIdentifier:
                    name: 'y'
                    position: "38:2:13"
      - scenario:
          name: Call Expression
          tests:
            - name: Arguments lined up
              input: |
                fun funny(a: Int, b: Float, c: Bool): Int {
                  return a;
                }

                fun main() {
                  const r = funny(0, 1.0, true);
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: funny
                        arguments:
                          - name: a
                            type: Int
                          - name: b
                            type: Float
                          - name: c
                            type: Bool
                        s: []
                        e:
                          IdentifierReference:
                            name: a
                            type: Int
                  s:
                    ConstantDeclarationStatement:
                      identifier: r
                      e:
                        CallExpression:
                          type: Int
                          name: funny
                          parameters:
                            - LiteralValue:
                                LiteralInt: '0'
                            - LiteralValue:
                                LiteralFloat: '1.0'
                            - LiteralValue:
                                LiteralBool: 'True'
            - name: Arguments and parameter cardinality mismatch
              input: |
                fun add(a: Int, b: Int): Int {
                  return a + b;
                }

                fun main() {
                  const r = add(0);
                }
              output:
                - MismatchInNumberOfParameters:
                    arguments: '1'
                    parameters: '2'
                    position: 75:6:13-77:6:15
            - name: Arguments and parameter type mismatch
              input: |
                fun add(a: Int, b: Int): Int {
                  return a + b;
                }

                fun main() {
                  const r = add(0, 1.1);
                }
              output:
                - IncompatibleArgumentType:
                    argumentType: Float
                    parameterType: Int
                    position: 82:6:20-84:6:22
            - name: Result does not return Int, Float or Bool
              input: |
                fun add(a: Int, b: Int) {
                }

                fun main() {
                  const r = add(0, 1);
                }
              output:
                - UnableToCallUnitFunctionAsValueFunction:
                    name: add
                    position: 54:5:13-56:5:15
            - name: Unknown identifier
              input: |
                fun main() {
                  const r = add(0, 1);
                }
              output:
                - UnknownIdentifier:
                    name: add
                    position: 25:2:13-27:2:15
            - name: Attempt to call a variable
              input: |
                let add = 10;

                fun main() {
                  const r = add(0, 1);
                }
              output:
                - UnableToCallVariableAsFunction:
                    name: add
                    position: 40:4:13-42:4:15
            - name: Attempt to call a constant
              input: |
                const add = 10;

                fun main() {
                  const r = add(0, 1);
                }
              output:
                - UnableToCallConstantAsFunction:
                    name: add
                    position: 42:4:13-44:4:15
- scenario:
    name: Statements
    tests:
      - scenario:
          name: Assignment
          tests:
            - name: Int variable
              input: |
                fun main() {
                  let x = 1;

                  x = 2;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '1'
                      - AssignmentStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '2'
            - name: Float variable
              input: |
                fun main() {
                  let x = 1.2;

                  x = 3.4;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '1.2'
                      - AssignmentStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralFloat: '3.4'
            - name: Bool variable
              input: |
                fun main() {
                  let x = true;

                  x = false;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                      - AssignmentStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralBool: 'False'
            - name: Int constant
              input: |
                fun main() {
                  const x = 1;

                  x = 2;
                }
              output:
                - UnableToAssignToConstant:
                    name: x
                    position: "31:4:3"
            - name: Float constant
              input: |
                fun main() {
                  const x = 1.0;

                  x = 2.0;
                }
              output:
                - UnableToAssignToConstant:
                    name: x
                    position: "33:4:3"
            - name: Bool constant
              input: |
                fun main() {
                  const x = true;

                  x = false;
                }
              output:
                - UnableToAssignToConstant:
                    name: x
                    position: "34:4:3"
            - name: Function
              input: |
                fun add(a: Int, b: Int): Int {
                  return a + b;
                }

                fun main() {
                  add = false;
                }
              output:
                - UnableToAssignToFunction:
                    name: add
                    position: 65:6:3-67:6:5
            - name: Incompatible type assignment
              input: |
                fun main() {
                  let x = true;

                  x = 1;
                }
              output:
                - UnableToAssignIncompatibleTypes:
                    type: Bool
                    position: "32:4:3"
                    expressionType: Int
                    expressionPosition: "36:4:7"
            - name: Undefined variable
              input: |
                fun main() {
                  x = false;
                }
              output:
                - UnknownIdentifier:
                    name: x
                    position: "15:2:3"
      - scenario:
          name: If Then Else
          tests:
            - name: If e Then
              input: |
                fun main() {
                  let x = 0;

                  if true
                    x = 1;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '0'
                      - IfThenElseStatement:
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                          s1:
                            AssignmentStatement:
                              identifier: x
                              e:
                                LiteralValue:
                                  LiteralInt: '1'
            - name: If e Then Else
              input: |
                fun main() {
                  let x = 0;

                  if true
                    x = 1;
                  else
                    x = 3;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '0'
                      - IfThenElseStatement:
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                          s1:
                            AssignmentStatement:
                              identifier: x
                              e:
                                LiteralValue:
                                  LiteralInt: '1'
                          s2:
                            AssignmentStatement:
                              identifier: x
                              e:
                                LiteralValue:
                                  LiteralInt: '3'
            - name: If e Then guard not boolean
              input: |
                fun main() {
                  let x = 0;

                  if x
                    x = 1;
                }
              output:
                - IfGuardNotBoolean:
                    type: Int
                    position: "32:4:6"
            - name: If e Then Else guard not boolean
              input: |
                fun main() {
                  let x = 0;

                  if x
                    x = 1;
                  else
                    x = 3;
                }
              output:
                - IfGuardNotBoolean:
                    type: Int
                    position: "32:4:6"
      - scenario:
          name: While
          tests:
            - name: While statement
              input: |
                fun main() {
                  let x = 0;

                  while true
                    x = x + 1;
                }
              output:
                Program:
                  d: []
                  s:
                    BlockStatement:
                      - VariableDeclarationStatement:
                          identifier: x
                          e:
                            LiteralValue:
                              LiteralInt: '0'
                      - WhileStatement:
                          e:
                            LiteralValue:
                              LiteralBool: 'True'
                          s:
                            AssignmentStatement:
                              identifier: x
                              e:
                                BinaryExpression:
                                  type: Int
                                  op: Plus
                                  e1:
                                    IdentifierReference:
                                      name: x
                                      type: Int
                                  e2:
                                    LiteralValue:
                                      LiteralInt: '1'
            - name: While guard not boolean
              input: |
                fun main() {
                  let x = 0;

                  while x {
                    x = x + 1;
                  }
                }
              output:
                - WhileGuardNotBoolean:
                    type: Int
                    position: "35:4:9"
      - scenario:
          name: Call
          tests:
            - name: Unit function without any arguments
              input: |
                fun something() {
                  something();
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: something
                        arguments: []
                        s:
                          - CallStatement:
                              identifier: something
                              parameters: []
                  s:
                    EmptyStatement: {}
            - name: Unit function with arguments
              input: |
                fun something(a: Int, b: Float, c: Bool) {
                  something(1, 2.0, true);
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: something
                        arguments:
                          - name: a
                            type: Int
                          - name: b
                            type: Float
                          - name: c
                            type: Bool
                        s:
                          - CallStatement:
                              identifier: something
                              parameters:
                                - LiteralValue:
                                    LiteralInt: '1'
                                - LiteralValue:
                                    LiteralFloat: '2.0'
                                - LiteralValue:
                                    LiteralBool: 'True'
                  s:
                    EmptyStatement: {}
            - name: Non-function with arguments
              input: |
                fun something(): Bool {
                  something();

                  return true;
                }
              output:
                - UnableToCallValueFunctionAsUnitFunction:
                    name: something
                    position: 26:2:3-34:2:11
            - name: Undefined function
              input: |
                fun something() {
                  somethingElse();
                }
              output:
                - UnknownIdentifier:
                    name: somethingElse
                    position: 20:2:3-32:2:15
            - name: Mismatch in argument and parameter cardinality
              input: |
                fun something(a: Int) {
                  something(1, 2.0);
                }
              output:
                - MismatchInNumberOfParameters:
                    arguments: '2'
                    parameters: '1'
                    position: 26:2:3-34:2:11
            - name: print
              input: |
                fun something(a: Int, b: Float, c: Bool) {
                  print("Hello: ", a, ", ", b, ", ", c);
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: something
                        arguments:
                          - name: a
                            type: Int
                          - name: b
                            type: Float
                          - name: c
                            type: Bool
                        s:
                          - CallStatement:
                              identifier: print
                              parameters:
                                - LiteralValue:
                                    LiteralString: '"Hello: "'
                                - IdentifierReference:
                                    name: a
                                    type: Int
                                - LiteralValue:
                                    LiteralString: '", "'
                                - IdentifierReference:
                                    name: b
                                    type: Float
                                - LiteralValue:
                                    LiteralString: '", "'
                                - IdentifierReference:
                                    name: c
                                    type: Bool
                  s:
                    EmptyStatement: {}
            - name: println
              input: |
                fun something(a: Int, b: Float, c: Bool) {
                  println("Hello: ", a, ", ", b, ", ", c);
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: something
                        arguments:
                          - name: a
                            type: Int
                          - name: b
                            type: Float
                          - name: c
                            type: Bool
                        s:
                          - CallStatement:
                              identifier: println
                              parameters:
                                - LiteralValue:
                                    LiteralString: '"Hello: "'
                                - IdentifierReference:
                                    name: a
                                    type: Int
                                - LiteralValue:
                                    LiteralString: '", "'
                                - IdentifierReference:
                                    name: b
                                    type: Float
                                - LiteralValue:
                                    LiteralString: '", "'
                                - IdentifierReference:
                                    name: c
                                    type: Bool
                  s:
                    EmptyStatement: {}
- scenario:
    name: Declarations
    tests:
      - scenario:
          name: Constant
          tests:
            - name: "unique declaration"
              input: |
                const x = true;
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: x
                        e:
                          LiteralBool: 'True'
                  s:
                    EmptyStatement: {}
            - name: "duplicate declaration - const const"
              input: |
                const x = true;

                const x = true;
              output:
                - AttemptToRedefineDeclaration:
                    name: x
                    position: "23:3:7"
            - name: "duplicate declaration - let const"
              input: |
                let x = true;

                const x = true;
              output:
                - AttemptToRedefineDeclaration:
                    name: x
                    position: "21:3:7"
      - scenario:
          name: Variable
          tests:
            - name: "unique declaration"
              input: |
                let x = true;
              output:
                Program:
                  d:
                    - VariableDeclaration:
                        identifier: x
                        e:
                          LiteralBool: 'True'
                  s:
                    EmptyStatement: {}
            - name: "duplicate declaration - let let"
              input: |
                let x = true;

                let x = true;
              output:
                - AttemptToRedefineDeclaration:
                    name: x
                    position: "19:3:5"
            - name: "duplicate declaration - const let"
              input: |
                const x = true;

                let x = true;
              output:
                - AttemptToRedefineDeclaration:
                    name: x
                    position: "21:3:5"
      - scenario:
          name: Function
          tests:
            - name: "unique declaration"
              input: |
                fun main() {}
              output:
                Program:
                  d: []
                  s:
                    BlockStatement: []
            - name: "duplicate declaration - fun fun"
              input: |
                fun fred() {}

                fun fred() {}
              output:
                - AttemptToRedefineDeclaration:
                    name: fred
                    position: 19:3:5-22:3:8
            - name: "duplicate declaration - let fun"
              input: |
                let fred = 1.0;

                fun fred() {}
              output:
                - AttemptToRedefineDeclaration:
                    name: fred
                    position: 21:3:5-24:3:8
            - name: "duplicate declaration - const fun"
              input: |
                const fred = 1.0;

                fun fred() {}
              output:
                - AttemptToRedefineDeclaration:
                    name: fred
                    position: 23:3:5-26:3:8
            - name: "duplicate argument name in function declaration"
              input: |
                fun fred(a: Int, b: Int, a: Float) {}
              output:
                - AttemptToRedefineDeclaration:
                    name: a
                    position: "25:1:26"
            - name: "argument name in function declaration may override global declaration"
              input: |
                const a = 1.0;

                fun add(a: Int, b: Int) {}
              output:
                Program:
                  d:
                    - ConstantDeclaration:
                        identifier: a
                        e:
                          LiteralFloat: '1.0'
                    - FunctionDeclaration:
                        identifier: add
                        arguments:
                          - name: a
                            type: Int
                          - name: b
                            type: Int
                        s: []
                  s:
                    EmptyStatement: {}
            - name: "duplicate declaration of main"
              input: |
                fun main() {}

                fun main() {}
              output:
                - AttemptToRedefineDeclaration:
                    name: main
                    position: 19:3:5-22:3:8
            - name: "declare value function called main"
              input: |
                fun main(): Int {
                  return 1;
                }
              output:
                - InvalidDeclarationOfMain:
                    position: 4:1:5-7:1:8
            - name: "declare constant called main"
              input: |
                const main = 1;
              output:
                - InvalidDeclarationOfMain:
                    position: 6:1:7-9:1:10
            - name: "declare variable called main"
              input: |
                let main = 1;
              output:
                - InvalidDeclarationOfMain:
                    position: 4:1:5-7:1:8
            - name: "declare unit function called main with parameters"
              input: |
                fun main(a: Int) {
                }
              output:
                - InvalidDeclarationOfMain:
                    position: 4:1:5-7:1:8
            - name: "functions are mutually recursive"
              input: |
                fun one() {
                  two();
                }

                fun two() {
                  one();
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: one
                        arguments: []
                        s:
                          - CallStatement:
                              identifier: two
                              parameters: []
                    - FunctionDeclaration:
                        identifier: two
                        arguments: []
                        s:
                          - CallStatement:
                              identifier: one
                              parameters: []
                  s:
                    EmptyStatement: {}
            - name: "main recursively calls itself"
              input: |
                fun main() {
                  main();
                }
              output:
                Program:
                  d: []
                  s:
                    CallStatement:
                      identifier: main
                      parameters: []
            - name: "function recursively calls main"
              input: |
                fun add() {
                  main();
                }

                fun main() {
                  main();
                }
              output:
                Program:
                  d:
                    - FunctionDeclaration:
                        identifier: add
                        arguments: []
                        s:
                          - CallStatement:
                              identifier: main
                              parameters: []
                  s:
                    CallStatement:
                      identifier: main
                      parameters: []

